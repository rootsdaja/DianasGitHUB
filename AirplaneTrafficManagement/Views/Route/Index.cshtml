@model AirplaneTrafficManagement.Models.RouteViewModel
@{
    ViewBag.Title = "Route Search Page";
}

<hgroup class="title">
    <h1>@ViewBag.Title.</h1>
    <h2>Display Routes</h2>
</hgroup>
<br/>

@*The center property specifies where to center the map. 
  Create a LatLng object to center the map on a specific point. 
  Pass the coordinates in the order: latitude, longitude.
  The zoom property specifies the zoom level for the map.
     zoom: 0 shows a map of the Earth fully zoomed out. 
    Higher zoom levels zoom in at a higher resolution.
The mapTypeId property specifies the map type to display. The following map types are supported:

ROADMAP (normal, default 2D map)
SATELLITE (photographic map)
HYBRID (photographic map + roads and city names)
TERRAIN (map with mountains, rivers, etc.)*@

<script src="http://maps.googleapis.com/maps/api/js">
</script>

<script>
    var myLocation = new google.maps.LatLng(51.508742, -0.120850);
    var map;
    var lineCoordinates =
        [ new google.maps.LatLng(37.772323, -122.214897),
          new google.maps.LatLng(21.291982, -157.821856)
        ];

    function initialize()
    {
        var mapProp = {
            center: myLocation,
            zoom: 5,
            mapTypeId: google.maps.MapTypeId.TERRAIN
        };

        map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

        google.maps.event.addListener(map, "click", function(event) {
            placeMarker(event.latLng);
        });
    }

    function placeMarker(location)
    {
        var marker = new google.maps.Marker({
            position: location,
            map: map,
            animation: google.maps.Animation.DROP
        });
        // marker.setMap(map);
        var infoWindow = new google.maps.InfoWindow({
            content: "Latitude: " + location.lat() + "<br>Longitude: " + location.lng()
        });
        infoWindow.open(map, marker);
    }

    function drawPolyline()
    {
        var line = new google.maps.Polyline({
            path: lineCoordinates,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        line.setMap(map);
    }
      
    google.maps.event.addDomListener(window, 'load', initialize);

</script>
<div id="googleMap" style="width:1141px;height:600px;"></div>
<br/>

@Html.ValidationSummary()
@Html.HiddenFor(model => model.idRoute)

<table class="table table-bordered table-hover">
    <tr>
        @*<th><b>Id Route</b></th>*@
        <th><b>Leaving From</b></th>
        <th><b>Going To</b></th>
        <th><b>Leaving Hour</b></th>
        <th><b>Arrival Hour</b></th>
        <th><b>Options</b></th>
    </tr>
    @foreach (var item in Model._routeList)
    {
        <tr>
            @*<td>
                @Html.DisplayFor(modelItem => item.idRoute)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.leavingFrom)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.goingTo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.leavingHour)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.arrivalHour)
            </td>
            <td>
                @*@{var session = new Common.WebSessionContext();
                    }

                    @if (session.Admin == true)
                    {*@
                @Html.ActionLink("Edit", "EditRoute", "Route", new { id = item.idRoute }, null) |
                @Html.ActionLink("Delete", "DeleteRoute", "Route", new { id = item.idRoute }, null) |
                @Html.ActionLink("Add", "CreateRoute", "Route", null) 
                @*<p>@Html.ActionLink("Movie Details", "movieDetail", "Flight", new { id_detail = item.idFlight }, null)</p>*@
                @*}

                    else
                    {*@
                @*@Html.ActionLink("Flight Details", "movieDetail", "Flight", new { id_detail = item.idFlight }, null)
                    <p>@Html.ActionLink("Reserve Ticket", "CreateTicket", "Flight", new { id = item.idFlight }, null)  </p>*@
                @*}*@
            </td>
        </tr>
    }
</table>

@*<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">

    var markers = [

             {
                 "title": 'Cluj Napoca',
                 "lat": '46.7667 ',
                 "lng": '23.6',
                 "description": 'Cluj Napoca, jud. Cluj.'
             }

        ,

             {
                 "title": 'Bucuresti',
                 "lat": '44.42',
                 "lng": '26.17',
                 "description": 'Bucuresti.'
             }
        ,

             {
                 "title": 'Braila',
                 "lat": '45.28',
                 "lng": '27.97',
             }

    ];

    window.onload = function () {
        var mapOptions = {
            center: new google.maps.LatLng(markers[0].lat, markers[0].lng),
            zoom: 8,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var path = new google.maps.MVCArray();
        var service = new google.maps.DirectionsService();

        var infoWindow = new google.maps.InfoWindow();
        var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
        var poly = new google.maps.Polyline({ map: map, strokeColor: '#FF8200' });
        var lat_lng = new Array();
        for (i = 0; i < markers.length; i++) {
            var data = markers[i]
            var myLatlng = new google.maps.LatLng(data.lat, data.lng);
            lat_lng.push(myLatlng);
            var marker = new google.maps.Marker({
                position: myLatlng,
                map: map,
                title: data.title
            });
            (function (marker, data) {
                google.maps.event.addListener(marker, "click", function (e) {
                    infoWindow.setContent(data.description);
                    infoWindow.open(map, marker);
                });
            })(marker, data);
        }
        for (var i = 0; i < lat_lng.length; i++) {
            if ((i + 1) < lat_lng.length) {
                var src = lat_lng[i];
                var des = lat_lng[i + 1];
                path.push(src);
                poly.setPath(path);
                service.route({
                    origin: src,
                    destination: des,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                }, function (result, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                            path.push(result.routes[0].overview_path[i]);
                        }
                    }
                });
            }
        }
    }

</script>

<div id="dvMap" style="width: 1100px; height: 600px"></div>*@




